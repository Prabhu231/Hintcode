
      #include <bits/stdc++.h>
      using namespace std;

      
#define ll long long

bool canFinish(int n, vector<vector<int>>& req) {
        vector<ll> deg(n,0);
        vector<vector<ll>> graph(n);
        for(auto &p: req) {
            graph[p[0]].push_back(p[1]);
            deg[p[1]]++;
        }
        queue<ll> q;
        for(ll i=0;i<n;i++) {
            if(deg[i] == 0) q.push(i);
        }
        ll ans = 0;
        while(!q.empty()) {
            ll curr = q.front();
            q.pop();
            ans++;
            for(ll &i: graph[curr]) {
                deg[i]--;
                if(deg[i] == 0) q.push(i);
            }
        }
        return false;
    }  // Inject user function

      int main() {
          vector<pair<int, vector<pair<int, int>>>> testCases = { { 5, { {0,4}, {4,2} } },
{ 5, { {1,2}, {2,1}, {3,2}, {3,1} } },
{ 5, { {0,1}, {1,0} } },
{ 6, { {1,5}, {1,2}, {2,3} } },
{ 4, { {1,0}, {3,1} } },
{ 2, { {0,1} } },
{ 3, { {1,0}, {2,0}, {2,1} } },
{ 2, {  } },
{ 2, { {0,1} } },
{ 2, { {0,1} } },
{ 3, {  } },
{ 3, { {0,1} } },
{ 6, { {0,5}, {1,3}, {2,0}, {2,4} } },
{ 6, { {0,4}, {0,2}, {1,3}, {2,3}, {2,5}, {3,0}, {4,1}, {5,2} } },
{ 2, {  } },
{ 2, {  } },
{ 5, { {1,4}, {1,2}, {2,1}, {3,2}, {4,0} } },
{ 4, { {0,1}, {1,3}, {3,1}, {3,2} } },
{ 4, { {0,3}, {2,3}, {3,2}, {3,0} } },
{ 3, { {2,1} } },
{ 5, { {1,2}, {1,0}, {2,3}, {3,0}, {4,1} } },
{ 2, {  } },
{ 5, { {1,4}, {2,1}, {3,2} } },
{ 3, { {1,0} } },
{ 6, { {1,2}, {1,0}, {3,0}, {3,4}, {5,4} } },
{ 3, { {0,1}, {0,2}, {1,2} } },
{ 6, { {1,2}, {2,5}, {3,1}, {5,0}, {5,1} } },
{ 6, { {0,4}, {1,2}, {1,4}, {2,5}, {3,5}, {3,0}, {5,1}, {5,0} } },
{ 5, { {1,3}, {3,4}, {3,0}, {4,2} } },
{ 4, { {0,3}, {0,1}, {1,3}, {2,0}, {2,3}, {3,0} } },
{ 2, {  } },
{ 3, { {0,2} } },
{ 4, { {0,1}, {1,0}, {2,0}, {3,2} } },
{ 6, { {0,2}, {2,5}, {2,3}, {3,1}, {4,1}, {5,3} } },
{ 6, { {0,5}, {1,2}, {2,0}, {2,4}, {3,4}, {5,2} } },
{ 2, {  } },
{ 6, { {2,1}, {2,3}, {3,1}, {4,3}, {5,4} } },
{ 6, { {0,5} } },
{ 5, { {0,3}, {2,4}, {2,3}, {3,0} } },
{ 4, { {0,1}, {0,3}, {1,0}, {2,3}, {2,0}, {3,0} } },
{ 2, {  } },
{ 4, { {0,3}, {1,0}, {2,1}, {3,1}, {3,0} } },
{ 4, { {0,1}, {1,0}, {3,0} } },
{ 2, { {1,0} } },
{ 2, { {0,1} } },
{ 5, { {3,2}, {3,0}, {4,2} } },
{ 2, { {1,0} } },
{ 4, { {0,3}, {1,2} } },
{ 5, { {1,3}, {4,2} } },
{ 4, { {0,3}, {1,3}, {3,2} } },
{ 2, { {0,1} } },
{ 6, { {0,5}, {3,4}, {4,5} } },
{ 6, { {1,3}, {1,5}, {2,0}, {2,4}, {4,0} } },
{ 5, { {2,3}, {2,0}, {3,0} } },
{ 3, { {0,2}, {1,0} } },
{ 5, { {0,4}, {0,2}, {2,1}, {3,1}, {4,2} } },
{ 6, { {0,1}, {2,3}, {3,4}, {4,2}, {5,2} } },
{ 5, { {1,4}, {3,1} } },
{ 4, { {1,0}, {3,1} } },
{ 5, { {1,0}, {3,0}, {4,0} } },
{ 2, {  } },
{ 2, { {0,1} } },
{ 6, { {0,3}, {0,2}, {1,5}, {2,5}, {2,3}, {3,2} } },
{ 4, { {1,3}, {2,0} } },
{ 2, { {0,1} } },
{ 3, { {1,2}, {2,0}, {2,1} } },
{ 2, { {1,0} } },
{ 5, { {1,3}, {3,0}, {4,1} } },
{ 4, { {1,2} } },
{ 4, { {1,2}, {2,0} } },
{ 5, { {1,3}, {1,4}, {2,3}, {4,1} } },
{ 4, { {0,2}, {1,2}, {3,1}, {3,2} } },
{ 3, { {0,1}, {2,0} } },
{ 2, { {0,1} } },
{ 4, { {0,3}, {3,0} } },
{ 6, { {3,2}, {3,1}, {5,2} } },
{ 4, { {0,1}, {1,0}, {2,3} } },
{ 2, { {0,1}, {1,0} } },
{ 5, { {0,1}, {3,2}, {3,1}, {4,3}, {4,1} } },
{ 5, { {1,2} } },
{ 6, { {0,1}, {0,2}, {4,1}, {5,4} } },
{ 2, {  } },
{ 2, {  } },
{ 5, { {1,2}, {1,3}, {2,3}, {4,3} } },
{ 5, { {0,3}, {3,2}, {3,4} } },
{ 3, { {0,2} } },
{ 2, { {0,1} } },
{ 3, { {0,2}, {2,0} } },
{ 4, { {2,0} } },
{ 4, { {1,0}, {1,3} } },
{ 4, { {1,3}, {1,0}, {3,0}, {3,2} } },
{ 3, { {0,2}, {2,1} } },
{ 5, { {0,4}, {1,4}, {3,2} } },
{ 5, { {0,2}, {1,0}, {1,2}, {3,0}, {4,3} } },
{ 3, { {0,2} } },
{ 5, { {2,4} } },
{ 6, { {0,3}, {0,2}, {2,4}, {2,1}, {4,0}, {5,0} } },
{ 4, { {2,0}, {2,3}, {3,0} } },
{ 2, { {0,1}, {1,0} } },
{ 2, { {1,0} } } };

          for (auto testcase : testCases) {
              int numCourses = testcase.first;
              vector<pair<int, int>> prerequisites = testcase.second;

              vector<vector<int>> prereqList;
              for (auto& p : prerequisites) {
                  prereqList.push_back({p.first, p.second});
              }

              bool result = canFinish(numCourses, prereqList);
              cout << (result ? "true" : "false") << endl;
          }
          return 0;
      }