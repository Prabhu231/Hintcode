
      #include <bits/stdc++.h>
      using namespace std;

          int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int, int>> q;
        int fresh = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 2)
                    q.push({i, j});
                else if (grid[i][j] == 1)
                    fresh++;
            }
        }
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int time = 0;
        while (!q.empty() && fresh) {
            time++;
            int sz = q.size();
            while (sz--) {
                pair<int, int> p = q.front();
                q.pop();
                for (auto& d : dir) {
                    int ni = p.first + d[0], nj = p.second + d[1];
                    if (ni >= 0 && ni < m && nj >= 0 && nj < n &&
                        grid[ni][nj] == 1) {
                        grid[ni][nj] = 2;
                        q.push({ni, nj});
                        fresh--;
                    }
                }
            }
        }
        return fresh == 0 ? time : -1;
    }  // Injected user solution

      int main() {
          vector<vector<vector<int>>> testCases = { { { 1, 1 }, { 2, 1 } },
{ { 0, 1, 0 }, { 0, 0, 2 } },
{ { 2, 1, 1, 1 }, { 1, 0, 1, 1 }, { 0, 0, 1, 1 } },
{ { 0, 0 }, { 2, 1 }, { 0, 2 }, { 0, 1 } },
{ { 0, 2, 0 }, { 2, 1, 1 }, { 0, 0, 0 }, { 2, 1, 1 } },
{ { 2, 2, 0 }, { 2, 0, 2 } },
{ { 0, 1, 0 }, { 0, 2, 1 }, { 0, 1, 2 }, { 1, 0, 2 } },
{ { 1, 1, 2, 2 }, { 2, 2, 2, 2 }, { 0, 0, 2, 2 } },
{ { 0, 2, 1, 1 }, { 1, 2, 1, 1 }, { 0, 2, 0, 2 } },
{ { 0, 2 }, { 1, 1 } },
{ { 0, 1 }, { 1, 0 }, { 1, 0 }, { 1, 0 } },
{ { 0, 1, 1, 2 }, { 0, 2, 1, 0 } },
{ { 0, 2, 2, 0 }, { 2, 1, 2, 1 }, { 0, 2, 2, 1 }, { 0, 1, 0, 2 } },
{ { 0, 2, 2, 0 }, { 1, 1, 2, 1 }, { 2, 2, 1, 1 }, { 2, 2, 0, 2 } },
{ { 2, 1, 0, 2 }, { 0, 1, 1, 1 }, { 1, 1, 2, 2 } },
{ { 0, 1, 2 }, { 2, 2, 0 } },
{ { 0, 1, 0, 1 }, { 1, 0, 0, 0 } },
{ { 1, 2, 2 }, { 2, 0, 0 }, { 0, 1, 1 } },
{ { 2, 1, 1 }, { 2, 2, 0 } },
{ { 1, 1, 2 }, { 1, 0, 0 }, { 1, 1, 2 } },
{ { 1, 2, 1 }, { 1, 1, 2 }, { 2, 0, 2 } },
{ { 0, 1 }, { 1, 2 }, { 1, 0 }, { 1, 2 } },
{ { 2, 0 }, { 2, 1 }, { 1, 2 }, { 1, 0 } },
{ { 2, 2, 1 }, { 0, 1, 1 }, { 0, 1, 2 }, { 0, 1, 0 } },
{ { 2, 1 }, { 0, 1 }, { 0, 1 }, { 2, 0 } },
{ { 2, 0, 2 }, { 2, 0, 2 }, { 0, 1, 2 }, { 1, 1, 1 } },
{ { 1, 0, 2 }, { 2, 0, 0 } },
{ { 0, 2, 1, 0 }, { 2, 2, 0, 2 }, { 1, 1, 2, 2 }, { 1, 0, 0, 2 } },
{ { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 1, 1, 2, 0 }, { 0, 2, 2, 0 } },
{ { 0, 2 }, { 1, 2 }, { 2, 1 } },
{ { 1, 2, 0, 1 }, { 0, 1, 1, 1 }, { 2, 2, 0, 0 }, { 0, 0, 2, 1 } },
{ { 0, 1, 2, 0 }, { 2, 1, 1, 2 }, { 2, 0, 1, 0 } },
{ { 0, 2 }, { 2, 0 }, { 0, 0 }, { 2, 2 } },
{ { 0, 1, 2, 2 }, { 2, 0, 2, 1 }, { 0, 1, 2, 2 } },
{ { 2, 0, 0 }, { 0, 0, 2 } },
{ { 2, 2 }, { 0, 2 }, { 2, 0 } },
{ { 1, 2, 0, 1 }, { 0, 0, 1, 1 }, { 1, 2, 2, 1 }, { 2, 0, 2, 1 } },
{ { 1, 1, 2 }, { 0, 0, 0 }, { 0, 2, 1 }, { 1, 2, 1 } },
{ { 0, 1, 1, 0 }, { 1, 2, 2, 0 }, { 0, 2, 1, 2 }, { 2, 1, 0, 1 } },
{ { 1, 2 }, { 0, 1 } },
{ { 2, 0 }, { 1, 2 }, { 0, 1 }, { 2, 1 } },
{ { 0, 0, 2 }, { 2, 0, 2 } },
{ { 1, 2, 1, 2 }, { 0, 0, 2, 2 }, { 2, 0, 2, 1 }, { 2, 2, 0, 2 } },
{ { 1, 1, 1 }, { 1, 2, 2 }, { 1, 0, 0 } },
{ { 0, 2 }, { 0, 0 } },
{ { 0, 1, 0 }, { 1, 1, 2 }, { 2, 2, 0 } },
{ { 0, 1 }, { 0, 2 } },
{ { 2, 0, 1 }, { 2, 2, 0 }, { 0, 1, 1 } },
{ { 2, 1 }, { 0, 2 }, { 1, 1 } },
{ { 0, 1, 1 }, { 2, 2, 1 } },
{ { 1, 0, 2, 2 }, { 1, 0, 2, 1 }, { 2, 2, 2, 2 }, { 2, 0, 0, 2 } },
{ { 1, 2, 2, 1 }, { 1, 2, 1, 2 }, { 1, 2, 0, 0 } },
{ { 2, 1, 1 }, { 1, 1, 0 }, { 0, 2, 2 } },
{ { 1, 0, 0 }, { 2, 2, 0 } },
{ { 2, 0, 0, 0 }, { 0, 0, 0, 1 }, { 1, 0, 0, 2 } },
{ { 0, 0 }, { 1, 2 }, { 0, 1 } },
{ { 2, 0 }, { 1, 2 } },
{ { 2, 2 }, { 1, 1 }, { 2, 1 } },
{ { 1, 1, 2 }, { 0, 0, 1 }, { 2, 0, 1 }, { 1, 0, 2 } },
{ { 2, 1, 2 }, { 1, 2, 1 }, { 2, 1, 1 } },
{ { 0, 2, 1 }, { 2, 2, 0 }, { 2, 1, 2 } },
{ { 0, 2, 1 }, { 2, 1, 0 }, { 1, 0, 2 }, { 0, 1, 2 } },
{ { 0, 0, 0 }, { 1, 0, 0 }, { 0, 0, 0 } },
{ { 0, 1 }, { 0, 2 } },
{ { 0, 1, 0, 0 }, { 0, 0, 2, 0 } },
{ { 1, 2, 1 }, { 0, 2, 1 } },
{ { 1, 2, 2 }, { 1, 2, 1 }, { 0, 1, 0 }, { 2, 1, 0 } },
{ { 1, 0, 2 }, { 2, 2, 1 } },
{ { 1, 0 }, { 2, 2 }, { 1, 0 } },
{ { 1, 0, 0, 2 }, { 1, 0, 2, 2 }, { 2, 0, 1, 0 }, { 0, 1, 0, 2 } },
{ { 2, 2, 2 }, { 2, 2, 2 }, { 2, 1, 2 }, { 0, 1, 0 } },
{ { 0, 1, 1 }, { 1, 0, 1 } },
{ { 2, 1 }, { 0, 1 } },
{ { 0, 2 }, { 0, 1 }, { 0, 0 } },
{ { 2, 2, 1, 1 }, { 1, 0, 2, 0 }, { 1, 2, 1, 1 } },
{ { 0, 1 }, { 2, 1 }, { 1, 2 }, { 0, 2 } },
{ { 1, 0, 0, 2 }, { 1, 2, 0, 0 }, { 2, 0, 2, 2 } },
{ { 0, 2, 1, 1 }, { 1, 2, 0, 2 }, { 1, 2, 0, 0 }, { 2, 1, 1, 1 } },
{ { 1, 1, 0, 1 }, { 2, 1, 0, 1 }, { 1, 2, 1, 0 }, { 2, 0, 0, 1 } },
{ { 0, 2 }, { 2, 1 }, { 1, 2 } },
{ { 0, 2 }, { 2, 2 } },
{ { 1, 1, 2 }, { 2, 0, 2 } },
{ { 0, 1, 0 }, { 2, 2, 2 }, { 1, 2, 1 } },
{ { 1, 0, 1 }, { 1, 1, 2 }, { 0, 1, 2 } },
{ { 2, 2, 1 }, { 0, 2, 2 }, { 0, 1, 2 } },
{ { 1, 2, 1, 0 }, { 1, 2, 1, 1 }, { 0, 0, 1, 1 } },
{ { 1, 1, 2 }, { 1, 2, 1 }, { 0, 1, 2 }, { 2, 1, 2 } },
{ { 0, 1 }, { 0, 0 }, { 2, 1 }, { 2, 2 } },
{ { 1, 0, 2 }, { 0, 0, 0 }, { 1, 2, 2 }, { 1, 2, 1 } },
{ { 0, 2, 0 }, { 1, 2, 2 } },
{ { 2, 2 }, { 1, 2 }, { 0, 1 } },
{ { 0, 1, 2, 2 }, { 1, 1, 1, 2 }, { 0, 1, 2, 1 }, { 1, 0, 0, 0 } },
{ { 1, 0 }, { 1, 0 }, { 2, 2 } },
{ { 0, 1 }, { 0, 2 }, { 2, 0 }, { 2, 0 } },
{ { 0, 1, 1 }, { 2, 2, 1 }, { 1, 2, 1 }, { 0, 1, 0 } },
{ { 1, 0, 1 }, { 2, 0, 1 }, { 1, 1, 0 }, { 0, 1, 2 } },
{ { 1, 1, 1 }, { 1, 2, 0 }, { 0, 1, 1 } },
{ { 2, 0, 1 }, { 1, 2, 1 }, { 2, 1, 2 } },
{ { 2, 0, 0, 0 }, { 0, 2, 2, 2 }, { 0, 1, 1, 2 } },
{ { 0, 2, 0, 1 }, { 1, 1, 2, 0 }, { 2, 0, 0, 1 } } };

          for (auto grid : testCases) {
              int result = orangesRotting(grid);
              cout << result << endl;
          }

          return 0;
      }
    